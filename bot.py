import asyncio
import re

from selenium import webdriver

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, Text
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

bot = Bot(token='6157242757:AAF00WlpAZ5fpFHoHGiRxMDNdhjlxGEgJiM')  # –ë–æ—Ç
dp = Dispatcher()
s = Service('chromedriver.exe')
driver = webdriver.Chrome(service=s)


class Storage:
    countries = dict()
    hotels = dict()

    @classmethod
    async def set_aviable_countries(self, countries):
        self.countries = countries

    @classmethod
    async def set_aviable_hotels(self, hotels):
        self.hotels = hotels


class User:

    def __init__(self, first_name, middle_name, last_name, phone_number):
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.phone_number = phone_number

    suggestions = dict()

    async def set_first_name(self, first_name):
        self.first_name = first_name

    async def set_last_name(self, last_name):
        self.last_name = last_name

    async def set_middle_name(self, middle_name):
        self.middle_name = middle_name

    async def set_phone_number(self, phone_number):
        self.phone_number = phone_number


class BookHotel(StatesGroup):
    unnamed = State()
    standart = State()
    editing_info = State()
    editing_first_name = State()
    editing_last_name = State()
    editing_middle_name = State()
    editing_phone_number = State()
    checking_profile = State()
    choosing_country = State()
    choosing_town = State()
    choosing_hotel = State()
    choosing_suggestion = State()


main_user = User('', '', '', '')


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –û–±–Ω—É–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    kb = [[types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await state.set_state(BookHotel.unnamed)
    await main_user.set_first_name('')
    await main_user.set_last_name('')
    await main_user.set_middle_name('')
    await main_user.set_phone_number('')
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç—É—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏.")
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=keyboard)


@dp.callback_query(Text("skip"))
async def skip_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BookHotel.standart)
    await main_user.set_first_name(callback.message.chat.first_name)
    await bot.send_message(
        text=f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {callback.message.chat.first_name}! –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /home",
        chat_id=callback.message.chat.id)


@dp.message(F.text, BookHotel.unnamed)
async def insert_initial_name(message: types.Message, state: FSMContext):
    if not re.compile(r"[^/]+").match(message.text):
        await state.set_state(BookHotel.standart)
        await main_user.set_first_name(message.from_user.first_name)
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã "
            f"–≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∏–º—è –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è Telegram.")
    else:
        await message.answer(f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {message.text}! –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /home")
        await state.set_state(BookHotel.standart)
        await main_user.set_first_name(message.text)


@dp.callback_query(Text("back_to_main_menu"))
async def duplicate_show_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BookHotel.standart)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ—Ñ–∏–ª—å",
        callback_data="profile")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
        callback_data="start_searching"
    )
    )
    builder.adjust(2)
    await bot.send_message(text="üö©–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞üö©", chat_id=callback.message.chat.id,
                           reply_markup=builder.as_markup())


@dp.message(Command("home"))
async def show_menu(message: types.Message, state: FSMContext):
    await state.set_state(BookHotel.standart)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ—Ñ–∏–ª—å",
        callback_data="profile")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
        callback_data="start_searching"
    )
    )
    builder.adjust(2)
    await message.answer(
        "üö©–î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞üö©",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(Text("profile"))
async def show_profile(callback: types.CallbackQuery, state: FSMContext):
    kb = [[types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_info"),
           types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)

    await state.set_state(BookHotel.checking_profile)
    await bot.send_message(chat_id=callback.message.chat.id, text=
    f"<b><i>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</i></b>:\n\n"
    f"<b>–§–∞–º–∏–ª–∏—è</b>: {main_user.last_name}\n"
    f"<b>–ò–º—è</b>: {main_user.first_name}\n"
    f"<b>–û—Ç—á–µ—Å—Ç–≤–æ</b>: {main_user.middle_name}\n"
    f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {main_user.phone_number}", parse_mode='HTML', reply_markup=keyboard)


@dp.callback_query(Text("edit_info"))
async def edit_profile(callback: types.CallbackQuery, state: FSMContext):
    kb = [
        [types.InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—é", callback_data="last_name"),
         types.InlineKeyboardButton(text="–ò–º—è", callback_data="first_name")],
        [types.InlineKeyboardButton(text="–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="middle_name")],
        [types.InlineKeyboardButton(text="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data="phone_number")],
        [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="profile")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)

    await state.set_state(BookHotel.editing_info)
    await bot.send_message(chat_id=callback.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?",
                           reply_markup=keyboard)


@dp.callback_query(Text("last_name"), BookHotel.editing_info)
async def edit_last_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BookHotel.editing_last_name)
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é")


@dp.message(F.text, BookHotel.editing_last_name)
async def complete_editing_last_name(message: types.Message):
    kb = [[types.InlineKeyboardButton(text="–î–∞", callback_data="edit_info"),
           types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="profile")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await main_user.set_last_name(message.text)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
    await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=keyboard)


@dp.callback_query(Text("first_name"), BookHotel.editing_info)
async def edit_first_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BookHotel.editing_first_name)
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è")


@dp.message(F.text, BookHotel.editing_first_name)
async def complete_editing_first_name(message: types.Message):
    kb = [[types.InlineKeyboardButton(text="–î–∞", callback_data="edit_info"),
           types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="profile")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await main_user.set_first_name(message.text)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
    await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=keyboard)


@dp.callback_query(Text("middle_name"), BookHotel.editing_info)
async def edit_middle_name(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BookHotel.editing_middle_name)
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ")


@dp.message(F.text, BookHotel.editing_middle_name)
async def complete_editing_middle_name(message: types.Message):
    kb = [[types.InlineKeyboardButton(text="–î–∞", callback_data="edit_info"),
           types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="profile")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await main_user.set_middle_name(message.text)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
    await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=keyboard)


@dp.callback_query(Text("phone_number"), BookHotel.editing_info)
async def edit_phone_number(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(BookHotel.editing_phone_number)
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")


@dp.message(F.text, BookHotel.editing_phone_number)
async def complete_editing_phone_number(message: types.Message):
    kb = [[types.InlineKeyboardButton(text="–î–∞", callback_data="edit_info"),
           types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="profile")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await main_user.set_phone_number(message.text)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
    await message.answer("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ?", reply_markup=keyboard)


@dp.callback_query(Text("start_searching"), BookHotel.standart)
async def choose_country(callback: types.CallbackQuery):
    url = "https://www.tez-tour.com/"
    driver.get(url)
    countries = dict()
    try:
        driver.find_element(By.ID, 'submitButton').click()
    except:
        pass
    finally:
        pass
    countries_container = driver.find_element(By.ID, 'hotOffersContainer')
    unfiltered_countries = countries_container.find_elements(By.CLASS_NAME, 'tile-item')
    for i in unfiltered_countries[:5]:
        country_name = i.find_element(By.CLASS_NAME, 'tile-title').text
        link = i.find_element(By.CLASS_NAME, 'tile-item-inner').get_attribute('href')
        countries[country_name] = link
    await Storage.set_aviable_countries(countries)

    kb = [[types.InlineKeyboardButton(text=i[0], callback_data=f'country:{i[0]}') for i in
           list(Storage.countries.items())[:3]],
          [types.InlineKeyboardButton(text=i[0], callback_data=f'country:{i[0]}') for i in
           list(Storage.countries.items())[3:]],
          [types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main_menu')]]

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)

    await bot.send_message(chat_id=callback.message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:",
                           reply_markup=keyboard)


@dp.callback_query(Text(startswith="country:"))
async def choose_hotel(callback: types.CallbackQuery):
    hotels = dict()
    for country_info in Storage.countries.items():
        if callback.data.split(':')[1] == country_info[0]:
            driver.get(country_info[1])
            break
    unfiltered_hotels = driver.find_elements(By.CLASS_NAME, 'side-has-rating')[:5]
    for unfiltered_hotel in unfiltered_hotels:
        hotel_info = unfiltered_hotel.find_element(By.CLASS_NAME, 'h5')
        hotel_name = hotel_info.text
        link = hotel_info.find_element(By.TAG_NAME, 'a').get_attribute('href')
        hotels[hotel_name] = link

    await Storage.set_aviable_hotels(hotels)

    kb = [[types.InlineKeyboardButton(text=i[0], url=i[1]) for i in
           list(Storage.hotels.items())[:2]],
          [types.InlineKeyboardButton(text=i[0], url=i[1]) for i in
           list(Storage.hotels.items())[2:]],
          [types.InlineKeyboardButton(text='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main_menu')]]

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)

    await bot.send_message(chat_id=callback.message.chat.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–µ–ª—å:",
                           reply_markup=keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
